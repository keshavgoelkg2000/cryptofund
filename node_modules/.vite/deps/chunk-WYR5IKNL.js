import {
  fetchCurrencyValue
} from "./chunk-EZZX3VV7.js";
import {
  init_lib
} from "./chunk-DTB7S26G.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-KAA6TFSL.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";

// node_modules/@thirdweb-dev/sdk/dist/erc-20-history-aaf3a654.browser.esm.js
init_shim();
init_lib();
var TokenERC20History = class {
  constructor(contractWrapper, events) {
    this.contractWrapper = contractWrapper;
    this.events = events;
  }
  async getAllHolderBalances() {
    const a = await this.events.getEvents("Transfer");
    const txns = a.map((b) => b.data);
    const balances = {};
    txns.forEach((item) => {
      const from = item == null ? void 0 : item.from;
      const to = item == null ? void 0 : item.to;
      const amount = item == null ? void 0 : item.value;
      if (!(from === lib_exports.AddressZero)) {
        if (!(from in balances)) {
          balances[from] = BigNumber.from(0);
        }
        balances[from] = balances[from].sub(amount);
      }
      if (!(to === lib_exports.AddressZero)) {
        if (!(to in balances)) {
          balances[to] = BigNumber.from(0);
        }
        balances[to] = balances[to].add(amount);
      }
    });
    const entries = Object.entries(balances);
    const results = await Promise.all(entries.map((_ref) => {
      let [, value] = _ref;
      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);
    }));
    return entries.map((_ref2, index) => {
      let [addr] = _ref2;
      return {
        holder: addr,
        balance: results[index]
      };
    });
  }
};

export {
  TokenERC20History
};
//# sourceMappingURL=chunk-WYR5IKNL.js.map
