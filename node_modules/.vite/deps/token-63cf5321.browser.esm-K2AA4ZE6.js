import {
  TokenERC20History
} from "./chunk-WYR5IKNL.js";
import {
  StandardErc20
} from "./chunk-PFQCOMVM.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractWrapper,
  Erc20SignatureMintable,
  GasCostEstimator,
  NFT_BASE_CONTRACT_ROLES,
  TokenErc20ContractSchema,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  require_dist,
  require_fast_deep_equal,
  resolveAddress
} from "./chunk-EZZX3VV7.js";
import "./chunk-QZ5GEFHZ.js";
import "./chunk-I4TCAHS5.js";
import "./chunk-457LSDR5.js";
import {
  init_lib
} from "./chunk-DTB7S26G.js";
import "./chunk-O2O3ULHT.js";
import {
  require_utils
} from "./chunk-MD4EOBS2.js";
import "./chunk-3327Y7YD.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-KAA6TFSL.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/token-63cf5321.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_utils = __toESM(require_utils());
var import_bs58 = __toESM(require_bs58());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_merkletreejs = __toESM(require_dist());
var _Token = class extends StandardErc20 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "mint", buildTransactionFunction(async (amount) => {
      return this.erc20.mint.prepare(amount);
    }));
    __publicField(this, "mintTo", buildTransactionFunction(async (to, amount) => {
      return this.erc20.mintTo.prepare(to, amount);
    }));
    __publicField(this, "mintBatchTo", buildTransactionFunction(async (args) => {
      return this.erc20.mintBatchTo.prepare(args);
    }));
    __publicField(this, "delegateTo", buildTransactionFunction(async (delegateeAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "delegate",
        args: [await resolveAddress(delegateeAddress)]
      });
    }));
    __publicField(this, "burn", buildTransactionFunction((amount) => {
      return this.erc20.burn.prepare(amount);
    }));
    __publicField(this, "burnFrom", buildTransactionFunction(async (holder, amount) => {
      return this.erc20.burnFrom.prepare(holder, amount);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _Token.contractRoles);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.history = new TokenERC20History(this.contractWrapper, this.events);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);
  }
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(account) {
    return await this.erc20.getValue(await this.contractWrapper.read("getVotes", [account]));
  }
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  async getDelegationOf(account) {
    return await this.contractWrapper.read("delegates", [await resolveAddress(account)]);
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  async getMintTransaction(to, amount) {
    return this.erc20.getMintTransaction(to, amount);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var Token = _Token;
__publicField(Token, "contractRoles", NFT_BASE_CONTRACT_ROLES);
export {
  Token
};
//# sourceMappingURL=token-63cf5321.browser.esm-K2AA4ZE6.js.map
