import {
  VoteType
} from "./chunk-RRAXJSXB.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractWrapper,
  GasCostEstimator,
  IERC20_default,
  Transaction,
  VoteContractSchema,
  buildTransactionFunction,
  fetchCurrencyMetadata,
  fetchCurrencyValue,
  require_bs58,
  require_dist,
  require_fast_deep_equal,
  resolveAddress
} from "./chunk-EZZX3VV7.js";
import "./chunk-QZ5GEFHZ.js";
import "./chunk-I4TCAHS5.js";
import "./chunk-457LSDR5.js";
import {
  Contract,
  init_lib,
  utils_exports
} from "./chunk-DTB7S26G.js";
import "./chunk-O2O3ULHT.js";
import {
  require_utils
} from "./chunk-MD4EOBS2.js";
import "./chunk-3327Y7YD.js";
import {
  BigNumber
} from "./chunk-KAA6TFSL.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/vote-1a3d346a.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_utils = __toESM(require_utils());
var import_bs58 = __toESM(require_bs58());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_merkletreejs = __toESM(require_dist());
var Vote = class {
  constructor(network, address, storage) {
    __publicField(this, "propose", buildTransactionFunction(async (description, executions) => {
      if (!executions) {
        executions = [{
          toAddress: this.contractWrapper.address,
          nativeTokenValue: 0,
          transactionData: "0x"
        }];
      }
      const tos = executions.map((p) => p.toAddress);
      const values = executions.map((p) => p.nativeTokenValue);
      const datas = executions.map((p) => p.transactionData);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "propose",
        args: [tos, values, datas, description],
        parse: (receipt) => {
          const event = this.contractWrapper.parseLogs("ProposalCreated", receipt == null ? void 0 : receipt.logs);
          return {
            id: event[0].args.proposalId,
            receipt
          };
        }
      });
    }));
    __publicField(this, "vote", buildTransactionFunction((() => {
      var _this = this;
      return async function(proposalId, voteType) {
        let reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        await _this.ensureExists(proposalId);
        return Transaction.fromContractWrapper({
          contractWrapper: _this.contractWrapper,
          method: "castVoteWithReason",
          args: [proposalId, voteType, reason]
        });
      };
    })()));
    __publicField(this, "execute", buildTransactionFunction(async (proposalId) => {
      await this.ensureExists(proposalId);
      const proposal = await this.get(proposalId);
      const tos = proposal.executions.map((p) => p.toAddress);
      const values = proposal.executions.map((p) => p.nativeTokenValue);
      const datas = proposal.executions.map((p) => p.transactionData);
      const descriptionHash = utils_exports.id(proposal.description);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "execute",
        args: [tos, values, datas, descriptionHash]
      });
    }));
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    this._chainId = chainId;
    this.abi = AbiSchema.parse(abi || []);
    this.contractWrapper = contractWrapper;
    this.storage = storage;
    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
  }
  get chainId() {
    return this._chainId;
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  async get(proposalId) {
    const all = await this.getAll();
    const proposals = all.filter((p) => p.proposalId.eq(BigNumber.from(proposalId)));
    if (proposals.length === 0) {
      throw new Error("proposal not found");
    }
    return proposals[0];
  }
  async getAll() {
    var _a;
    const _proposals = (_a = await this.contractWrapper.read("getAllProposals", [])) != null ? _a : [];
    const _items = await Promise.all(_proposals.map((item) => Promise.all([this.contractWrapper.read("state", [item.proposalId]), this.getProposalVotes(item.proposalId)])));
    return _items.map((_ref, index) => {
      let [state, votes] = _ref;
      const data = _proposals[index];
      return {
        proposalId: data.proposalId,
        proposer: data.proposer,
        description: data.description,
        startBlock: data.startBlock,
        endBlock: data.endBlock,
        state,
        votes,
        executions: data[3].map((c, i) => ({
          toAddress: data.targets[i],
          nativeTokenValue: c,
          transactionData: data.calldatas[i]
        }))
      };
    });
  }
  async getProposalVotes(proposalId) {
    const votes = await this.contractWrapper.read("proposalVotes", [proposalId]);
    return [{
      type: VoteType.Against,
      label: "Against",
      count: votes.againstVotes
    }, {
      type: VoteType.For,
      label: "For",
      count: votes.forVotes
    }, {
      type: VoteType.Abstain,
      label: "Abstain",
      count: votes.abstainVotes
    }];
  }
  async hasVoted(proposalId, account) {
    if (!account) {
      account = await this.contractWrapper.getSignerAddress();
    }
    return this.contractWrapper.read("hasVoted", [proposalId, await resolveAddress(account)]);
  }
  async canExecute(proposalId) {
    await this.ensureExists(proposalId);
    const proposal = await this.get(proposalId);
    const tos = proposal.executions.map((p) => p.toAddress);
    const values = proposal.executions.map((p) => p.nativeTokenValue);
    const datas = proposal.executions.map((p) => p.transactionData);
    const descriptionHash = utils_exports.id(proposal.description);
    try {
      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);
      return true;
    } catch (e) {
      return false;
    }
  }
  async balance() {
    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);
    return {
      name: "",
      symbol: "",
      decimals: 18,
      value: balance,
      displayValue: utils_exports.formatUnits(balance, 18)
    };
  }
  async balanceOfToken(tokenAddress) {
    const erc20 = new Contract(await resolveAddress(tokenAddress), IERC20_default, this.contractWrapper.getProvider());
    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));
  }
  async ensureExists(proposalId) {
    try {
      await this.contractWrapper.read("state", [proposalId]);
    } catch (e) {
      throw Error(`Proposal ${proposalId} not found`);
    }
  }
  async settings() {
    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read("votingDelay", []), this.contractWrapper.read("votingPeriod", []), this.contractWrapper.read("token", []), this.contractWrapper.read("quorumNumerator", []), this.contractWrapper.read("proposalThreshold", [])]);
    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);
    return {
      votingDelay: votingDelay.toString(),
      votingPeriod: votingPeriod.toString(),
      votingTokenAddress,
      votingTokenMetadata,
      votingQuorumFraction: votingQuorumFraction.toString(),
      proposalTokenThreshold: proposalTokenThreshold.toString()
    };
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
export {
  Vote
};
//# sourceMappingURL=vote-1a3d346a.browser.esm-JKDYFNGI.js.map
